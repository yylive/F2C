[{"id":0,"title":"介绍","content":"#","routePath":"/guide/chromePlugin/useage","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"基本用法","content":"#","routePath":"/guide/code/base","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"[进阶]组件映射","content":"#","routePath":"/guide/code/code-mark","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"[进阶] 自定义代码","content":"#","routePath":"/guide/code/code-tag","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"上传到SAAS平台","content":"#","routePath":"/guide/code/config","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"DSL","content":"#","routePath":"/guide/code/dsl","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"标注","content":"#","routePath":"/guide/code/label","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"全局设置","content":"#","routePath":"/guide/code/setting","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"变量","content":"#","routePath":"/guide/code/var","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"介绍","content":"#","routePath":"/guide/dsl/base","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":10,"title":"介绍","content":"#","routePath":"/guide/inspector/base","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":11,"title":"介绍","content":"#","routePath":"/guide/saas/base","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":12,"title":"Markdown & MDX","content":"#\n\nRspress supports not only Markdown but also MDX, a powerful way to develop\ncontent.\n\n\nMarkdown#\n\nMDX is a superset of Markdown, which means you can write Markdown files as\nusual. For example:\n\n\n\n\nUse Component#\n\nWhen you want to use React components in Markdown files, you should name your\nfiles with .mdx extension. For example:\n\n\n\n\nFront Matter#\n\nYou can add Front Matter at the beginning of your Markdown file, which is a\nYAML-formatted object that defines some metadata. For example:\n\n\n\n> Note: By default, Rspress uses h1 headings as html headings.\n\nYou can also access properties defined in Front Matter in the body, for example:\n\n\n\nThe previously defined properties will be passed to the component as frontmatter\nproperties. So the final output will be:\n\n\n\n\nCustom Container#\n\nYou can use the ::: syntax to create custom containers and support custom\ntitles. For example:\n\nInput:\n\n\n\nOutput:\n\nTIP\n\nThis is a block of type tip\n\nINFO\n\nThis is a block of type info\n\nWARNING\n\nThis is a block of type warning\n\nDANGER\n\nThis is a block of type danger\n\nDETAILS\n\nThis is a block of type details\n\nCustom Title\n\nThis is a block of Custom Title\n\nCustom Title\n\nThis is a block of Custom Title\n\n\nCode Block#\n\n\nBasic Usage#\n\nYou can use the ``` syntax to create code blocks and support custom titles. For\nexample:\n\nInput:\n\n\n\nOutput:\n\n\n\n\n\n\nShow Line Numbers#\n\nIf you want to display line numbers, you can enable the showLineNumbers option\nin the config file:\n\n\n\n\nWrap Code#\n\nIf you want to wrap long code line by default, you can enable the\ndefaultWrapCode option in the config file:\n\n\n\n\nLine Highlighting#\n\nYou can also apply line highlighting and code block title at the same time, for\nexample:\n\nInput:\n\n\n\nOuput:\n\n\n\n\nRustify MDX compiler#\n\nYou can enable Rustify MDX compiler by following config:","routePath":"/guide/start/default_template","lang":"zh","toc":[{"text":"Markdown","id":"markdown","depth":2,"charIndex":88},{"text":"Use Component","id":"use-component","depth":2,"charIndex":198},{"text":"Front Matter","id":"front-matter","depth":2,"charIndex":336},{"text":"Custom Container","id":"custom-container","depth":2,"charIndex":767},{"text":"Code Block","id":"code-block","depth":2,"charIndex":1190},{"text":"Basic Usage","id":"basic-usage","depth":3,"charIndex":1204},{"text":"Show Line Numbers","id":"show-line-numbers","depth":3,"charIndex":1332},{"text":"Wrap Code","id":"wrap-code","depth":3,"charIndex":1455},{"text":"Line Highlighting","id":"line-highlighting","depth":3,"charIndex":1580},{"text":"Rustify MDX compiler","id":"rustify-mdx-compiler","depth":2,"charIndex":1711}],"domain":"","frontmatter":{},"version":""},{"id":13,"title":"术语表","content":"#\n\n该索引列出了整个 YY F2C 生态系统中的常用术语。\n\n\n插件功能#\n\n\n图层查看 (Layer Inspector)#\n\n面板中简称图层， 指的是 F2C插件能够获取具体图层样式，例如：宽度、高度、背景等。\n\n\n代码生成 (Code Generator)#\n\n面板中简称代码， 指的是 F2C插件能够从图层直接转化为代码的功能。\n\n\n图层标签 (Layer Tag)#\n\n面板中简称标签, 指的是通过F2C面板中的标签功能，为图层打上特定信息，可实现对生成代码的内容进行定制。\n\n\n组件标记 (Component Mark)#\n\n面板中简称标记，指的是 通过 F2C 插件的标记面板为图层保存组件标记信息，用于处理Figma组件与代码组件间的映射关系，生成符合预期的组件代码。\n\n\n设计变量 (Design Variables)#\n\n面板中简称变量, 指的是Figma中的设计变量，F2C插件的变量面板可以对其进行一键导出为CSS变量。\n\n\n设计信息上传 （DesignInfo Upload）#\n\n面板中简称上传，F2C插件的上传面板可以对设计信息进行上传到私有服务，通过HTTP接口提供给第三方业务使用。\n\n\n全局设置 (Global Settings)#\n\n面板中简称设置，F2C插件的设置面板可以对生成代码的参数进行调整。\n\n\n其他术语#\n\n\ndev mode#\n\nFigma 的 dev mode 模式 指的是 YY F2C 标注面板中的类 dev mode 能力，能够查看用户选中图层的相关信息","routePath":"/guide/start/glossary","lang":"zh","toc":[{"text":"插件功能","id":"插件功能","depth":2,"charIndex":32},{"text":"图层查看 (Layer Inspector)","id":"图层查看-layer-inspector","depth":3,"charIndex":40},{"text":"代码生成 (Code Generator)","id":"代码生成-code-generator","depth":3,"charIndex":110},{"text":"图层标签 (Layer Tag)","id":"图层标签-layer-tag","depth":3,"charIndex":171},{"text":"组件标记 (Component Mark)","id":"组件标记-component-mark","depth":3,"charIndex":245},{"text":"设计变量 (Design Variables)","id":"设计变量-design-variables","depth":3,"charIndex":345},{"text":"设计信息上传 （DesignInfo Upload）","id":"设计信息上传-designinfo-upload","depth":3,"charIndex":425},{"text":"全局设置 (Global Settings)","id":"全局设置-global-settings","depth":3,"charIndex":511},{"text":"其他术语","id":"其他术语","depth":2,"charIndex":572},{"text":"dev mode","id":"dev-mode","depth":3,"charIndex":580}],"domain":"","frontmatter":{},"version":""},{"id":14,"title":"介绍","content":"#\n\nFigma & AI相结合生成开发代码的一站式解决方案\n\n\n为什么要做 F2C#\n\n我们自研F2C是要解决在团队在日常开发中面对轻逻辑、静态页面、组件化页面开发时耗费较多的时间和人力。\n\n我们在自研前调研过市面上的相关产品，包括但不限于imgcook、codefun（当时）和国外闭源开源产品，发现在还原度、轻逻辑和组件化代码、DSL自定义输出等方\n面并不能满足我们日常开发需求。需要做比较大的更改和适配才能使用，反而消耗了我们更多的时间和人力。\n\n相比起当前市面上的产品，F2C拥有更高的还原度、对Figma图层有完善的标注展示、针对轻逻辑和组件化代码进行了产品化方案、拥有完善的dsl体系方便扩展自定义代码\n，目前在团队内外广泛运用。\n\n\nF2C目前的状态#\n\n目前F2C已经处于发布状态，已经落地在团队内外的线上项目之中。\n\n\nF2C的未来#\n\n\n持续优化功能模块#\n\n提高还原度、提升DSL接入便利性、拥抱和吸纳更多建议和意见\n\n\n和更多团队伙伴合作#\n\n在团队内部，YY F2C已经落地了多个项目，目前正在和更多团队伙伴合作，希望 F2C 能够成为更多团队的标配。","routePath":"/guide/start/","lang":"zh","toc":[{"text":"为什么要做 F2C","id":"为什么要做-f2c","depth":2,"charIndex":32},{"text":"F2C目前的状态","id":"f2c目前的状态","depth":2,"charIndex":324},{"text":"F2C的未来","id":"f2c的未来","depth":2,"charIndex":369},{"text":"持续优化功能模块","id":"持续优化功能模块","depth":3,"charIndex":379},{"text":"和更多团队伙伴合作","id":"和更多团队伙伴合作","depth":3,"charIndex":422}],"domain":"","frontmatter":{},"version":""},{"id":15,"title":"快速开始设计稿转代码","content":"#\n\n\nFigma插件安装和运行#\n\n在开始使用前，你需要安装 YY F2C在Figma侧的插件\n\n> 需要注意的是，你需要对你目标Figma文档有编辑权限，若没有则可能找不到Plugins选项；并且请保证你的Figma是在设计模式下，开关如下图所示 ↓\n\n\n\n你可以在Figma桌面应用和Web Fimga来安装插件，以下是安装插件的简要步骤：\n\n 1. 点击左上方的Figma图标，选择Plugins，再选择 Find more plugins... 打开插件市场搜索框\n\n 2. 在搜索栏搜索YY F2C，选择我们的插件，点击 Run 运行\n\n 3. 看到插件成功运行则表示插件安装成功（注意：此时由于没有启动 @baidu/f2c-server，插件会提示连接中）\n\n> 注意：插件如果有更新，建议重复步骤2，重新打开插件可以确保插件在最新版本下运行\n\n\nf2c-server 安装#\n\n目前我们通过 f2c-server 服务来接受生成的资源，并放置在你指定的文件目录中。当然，后续我们会添加 codesandbox 和 vscode插件\n来更方便的接收生成的资源。\n\n\n全局安装 & 启动（推荐）#\n\n * 安装在 npm 全局，通过全局命令调用\n\n\n\n * 或者使用 pnpm 安装\n\n\n\n命令行输出运行端口，此时server准备就绪\n\n\n局部安装#\n\n 1. 打开命令行，进入到你的前端React项目\n\n\n\n 2. 安装 @baidu/f2c-servernpm 包，用于接收Figma插件提供的数据\n\n\n\n 3. package.json 添加 scripts 并执行\n\n\n\n","routePath":"/guide/start/quick-start","lang":"zh","toc":[{"text":"Figma插件安装和运行","id":"figma插件安装和运行","depth":2,"charIndex":3},{"text":"f2c-server 安装","id":"f2c-server-安装","depth":2,"charIndex":381},{"text":"全局安装 & 启动（推荐）","id":"全局安装--启动推荐","depth":3,"charIndex":490},{"text":"局部安装","id":"局部安装","depth":3,"charIndex":576}],"domain":"","frontmatter":{},"version":""},{"id":16,"title":"介绍","content":"#","routePath":"/guide/tokens/base","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""}]